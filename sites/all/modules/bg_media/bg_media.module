<?php
define('BG_MEDIA_THEME_FUNCTION_PREFIX', 'bg_media');
define('BG_MEDIA_DISPLAY_TYPE_MEDIA', 'bg_media');
define('BG_MEDIA_DISPLAY_TYPE_THUMBNAIL', 'bg_media_thumbnail');
define('BG_MEDIA_DISPLAY_TYPE_LENGTH', 'bg_media_length');
define('BG_MEDIA_FLASH_PLAYER_ID', 'fallback-player');

/**
 *  Implements hook_theme().
 */
function bg_media_theme($existing, $type, $theme, $path) {
  return array(
    BG_MEDIA_THEME_FUNCTION_PREFIX . '_video' => array(
      'variables' => array('file' => NULL, 'width' => 480, 'height' => 320),
      'template' => 'bg_media.video',
      'file' => 'bg_media.theme.inc',
      'path' => $path . '/includes/themes',
    ),
    BG_MEDIA_THEME_FUNCTION_PREFIX . '_image' => array(
      'variables' => array('file' => NULL),
      'file' => 'bg_media.theme.inc',
      'path' => $path . '/includes/themes',
    ),
    BG_MEDIA_THEME_FUNCTION_PREFIX . '_audio' => array(
      'variables' => array('file' => NULL, 'width' => 480, 'height' => 320),
      'template' => 'bg_media.audio',
      'file' => 'bg_media.theme.inc',
      'path' => $path . '/includes/themes',
    ),
  );
}

/**
 *  Implements hook_library().
 */
function bg_media_library() {
  // SWFObject
  $libraries['swfobject'] = array(
    'title'   => 'SWFObject',
    'website' => 'http://code.google.com/p/swfobject/',
    'version' => '2.2',
    'js'      => array(
      drupal_get_path('module', 'bg_media') . '/includes/js/swfobject/swfobject.js' => array(),
    ),
  );
  $libraries['videojs'] = array(
    'title'   => 'VideoJS',
    'website' => 'http://videojs.com/',
    'version' => '2.0.2',
    'js'      => array(
      drupal_get_path('module', 'bg_media') . '/includes/js/video-js/video.js' => array(),
    ),
    'css'     => array(
      drupal_get_path('module', 'bg_media') . '/includes/js/video-js/video-js.css' => array(),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_media_internet_providers();
 */
function bg_media_media_internet_providers() {
  return array(
    'MediaInternetOIHandler' => array(
      'title' => 'Open Images',
      'hidden' => TRUE,
    ),
    'MediaInternetBVDHandler' => array(
      'title' => 'Barend en Van Dorp',
      'hidden' => TRUE,
    ),
  );
}

/**
 * Implements hook_stream_wrappers().
 */
function bg_media_stream_wrappers() {
  return array(
    'openimages' => array(
      'name' => t('Open Images media'),
      'class' => 'MediaOpenImagesStreamWrapper',
      'description' => t('Media provided by Open Images.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
    'barendenvandorp' => array(
      'name' => t('Barend en Van Dorp media'),
      'class' => 'MediaBVDStreamWrapper',
      'description' => t('Media provided by Barend en Van Dorp.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implementation of CCK's hook_field_formatter_info().
 */
function bg_media_field_formatter_info() {
  return array(
    BG_MEDIA_DISPLAY_TYPE_MEDIA => array(
      'label'       => t('Beeld en Geluid: Media'),
      'field types' => array('file', 'media'),
      'description' => t('Display a Beeld en Geluid media.'),
    ),
    BG_MEDIA_DISPLAY_TYPE_THUMBNAIL => array(
      'label'       => t('Beeld en Geluid: Media thumbnail'),
      'field types' => array('file', 'media'),
      'description' => t('Display a Beeld en Geluid media thumbnail.'),
    ),
    BG_MEDIA_DISPLAY_TYPE_LENGTH => array(
      'label'       => t('Beeld en Geluid: Media length'),
      'field types' => array('number_integer'),
      'description' => t('Display length as H:M:S.'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function bg_media_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  switch ($display['type']) {
    case BG_MEDIA_DISPLAY_TYPE_MEDIA:
      $theme_registry = array_keys(theme_get_registry());

      foreach($items as $item) {
        $theme_function = BG_MEDIA_THEME_FUNCTION_PREFIX . '_' . $item['file']->type;

        // Check if theme function exists for this media type
        if(in_array($theme_function, $theme_registry)) {
          $element[] = array(
            '#theme' => $theme_function,
            '#file' => $item['file'],
            '#width' => 480,
            '#height' => 320,
          );
        }
      }
      break;

    case BG_MEDIA_DISPLAY_TYPE_THUMBNAIL:
      foreach($items as $item) {
        $uri = isset($item['file']) ? $item['file']->uri : $item['uri'];
        $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
        if ($wrapper instanceof BGMediaStreamWrapper) {
          $element[] = array(
            '#theme' => 'image_style',
            '#path' => $wrapper->getLocalThumbnailPath(),
            '#style_name' => isset($display['settings']['style_name']) ? $display['settings']['style_name'] : 'thumbnail',
          );
        }
      }
      break;

    case BG_MEDIA_DISPLAY_TYPE_LENGTH:
      foreach($items as $delta => $item) {
        $element[$delta] = array('#markup' => bg_media_duration($item['value']));
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_entity_info_alter().
 * Add a view mode for medium-sized media.
 */
function bg_media_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes']['media_medium'] = array(
    'label' => t('Medium'),
    'custom settings' => TRUE,
  );
}


function bg_media_form_media_format_form_alter($form, $form_state, $form_id) {
  /*
  dsm($form);
  unset($form['options']['format']['#options']['media_link']);
  unset($form['options']['format']['#options']['media_preview']);
  unset($form['options']['format']['#options']['media_original']);
  unset($form['options']['format']['#options']['token']);
  dsm($form);
  */
}

/**
 * Implements hook_menu().
 */
function bg_media_menu() {
  $items = array();

  $items['node/%node/embed'] = array(
    'title callback' => 'node_page_title',
    'title arguments' => array(1),
    'page callback' => 'bg_media_view_embed',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function bg_media_view_embed($node) {
  return node_view($node, 'embed');

}

function bg_media_duration($seconds_count) {
  $delimiter  = ':';
  $seconds = $seconds_count % 60;
  $minutes = floor($seconds_count/60);
  $hours   = floor($seconds_count/3600);

  $seconds = str_pad($seconds, 2, "0", STR_PAD_LEFT);
  $minutes = str_pad($minutes, 2, "0", STR_PAD_LEFT).$delimiter;

  if($hours > 0)
  {
  	$hours = str_pad($hours, 2, "0", STR_PAD_LEFT).$delimiter;
  }
  else
  {
  	$hours = '';
  }

  return "$hours$minutes$seconds";
}

