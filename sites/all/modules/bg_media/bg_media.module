<?php
define('BG_MEDIA_THEME_FUNCTION_PREFIX', 'bg_media');

/**
 *  Implements hook_theme().
 */
function bg_media_theme($existing, $type, $theme, $path) {
  return array(
    BG_MEDIA_THEME_FUNCTION_PREFIX . '_video' => array(
      'variables' => array('file' => NULL),
      'file' => 'bg_media.theme.inc',
      'path' => $path . '/includes/themes',
    ),
  );
}

/**
 * Implements hook_media_internet_providers();
 */
function bg_media_media_internet_providers() {
  return array(
    'MediaInternetOIHandler' => array(
      'title' => 'Open Images',
      'hidden' => TRUE,
    ),
    'MediaInternetBVDHandler' => array(
      'title' => 'Barend en Van Dorp',
      'hidden' => TRUE,
    ),
  );
}

/**
 * Implements hook_stream_wrappers().
 */
function bg_media_stream_wrappers() {
  return array(
    'openimages' => array(
      'name' => t('Open Images media'),
      'class' => 'MediaOpenImagesStreamWrapper',
      'description' => t('Media provided by Open Images.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
    'barendenvandorp' => array(
      'name' => t('Barend en Van Dorp media'),
      'class' => 'MediaBVDStreamWrapper',
      'description' => t('Media provided by Barend en Van Dorp.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implementation of CCK's hook_field_formatter_info().
 */
function bg_media_field_formatter_info() {
  return array(
    'bg_media' => array(
      'label' => t('Beeld en Geluid: Media'),
      'field types' => array('file', 'media'),
      'description' => t('Display a Beeld en Geluid media.'),
    )
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function bg_media_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  switch ($display['type']) {
    case 'bg_media':
      $theme_registry = array_keys(theme_get_registry());

      foreach($items as $item) {
        $theme_function = BG_MEDIA_THEME_FUNCTION_PREFIX . '_' . $item['file']->type;

        // Check if theme function exists for this media type
        if(in_array($theme_function, $theme_registry)) {
          $element[] = array(
            '#theme' => $theme_function,
            '#file' => $item['file'],
          );
        }
      }
      break;
  }

  return $element;
}

/**
 * Notice: File formatters are not used, but are a remenant of the previous branch 
 * which could be used in the future
 */

/**
 * Implements hook_file_formatter_info().
 */
function bg_media_file_formatter_info() {
  $formatters['bg_media_video'] = array(
    'label' => t('Beeld & Geluid video'),
    'view callback' => 'bg_media_file_formatter_bg_media_video_view',
    'settings callback' => 'bg_media_file_formatter_bg_media_video_settings',
  );
  $formatters['bg_media_image'] = array(
    'label' => t('Beeld en geluid image'),
    'view callback' => 'bg_media_file_formatter_bg_media_image_view',
  );
  
  return $formatters;
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 */
function bg_media_file_formatter_bg_media_video_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  
  $formatter = "bg_media_{$scheme}_video_formatter";
  
  if(function_exists($formatter)) {
    return $formatter($file);
  }
}

function bg_media_openimages_video_formatter($file) {
  // WYSIWYG does not yet support video inside a running editor instance.
  $element = array(
    '#theme' => 'bg_media_video',
    '#file' => $file,
  );
  return $element;
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 */
function bg_media_file_formatter_bg_media_image_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  if ($scheme == 'openimages') {
    $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
    $element = array(
      '#theme' => 'image',
      '#path' => $wrapper->getLocalThumbnailPath(),
    );

    return $element;
  }
}
