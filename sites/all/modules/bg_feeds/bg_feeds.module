<?php

/**
 * Implements hook_cron()
 */
function bg_feeds_cron() {
  $queue = DrupalQueue::get('bg_feeds_media_update');

  foreach(bg_feeds_get_unprocesssed_media_items() as $item) {
    $queue->createItem($item);
  }
}

/**
* Implements hook_cron_queue_info().
*/
function bg_feeds_cron_queue_info() {
  $queues = array();
  $queues['bg_feeds_media_update'] = array(
    'worker callback' => 'bg_feeds_update_media_item', //function to call for each item
    'time' => 30, //seconds to spend working on the queue
  );
  return $queues;
}

/**
 * Select media items to process
 *
 * Select media items linked to media nodes which are not already processed
 */
function bg_feeds_get_unprocesssed_media_items() {
  $items = array();

  // Select items which need to be processed
  $query = "SELECT FM.`fid`, DMF.`entity_id` AS `nid` " .
           "FROM {file_managed} AS FM " .
           "JOIN {field_data_field_media_file} AS DMF ON DMF.`field_media_file_fid` = FM.`fid` AND DMF.`entity_type` = 'node' AND DMF.`bundle` = 'media' " .
           "JOIN {feeds_item} AS FI ON FI.`entity_id` = DMF.`entity_id` AND FI.`entity_type` = 'node' " .
           "WHERE NOT EXISTS (SELECT * FROM `bg_feeds_media` AS BGM WHERE BGM.`fid` = FM.`fid`) " .
           "GROUP BY FM.`fid`";

  $result = db_query($query);

  foreach($result as $item) {
    $items[] = array('fid' => $item->fid, 'nid' => $item->nid);
    // Insert into processed list to ensure the item is being processed only once
    db_insert('bg_feeds_media')
      ->fields(array(
        'fid' => $item->fid,
        'queued' => REQUEST_TIME)
      )
      ->execute();
  }

  return $items;
}

function bg_feeds_update_media_item($item) {
  $file = file_load($item['fid']);
  $node = node_load($item['nid']);

  if ((isset($file->field_file_title) && isset($file->field_tags)) && (empty($file->field_file_title) && empty($file->field_tags))) {
    // Set title
    $file->field_file_title = array(
      'und' => array(
        array(
          'value' => $node->title,
          'format' => 'plain_text'
        )
      )
    );

    // Initialize tags
    $file->field_tags = array(
      'und' => array()
    );
    // Add node tags to file tags -> same vocabulary, so can be directly referenced
    bg_feeds_update_media_item_tags($file->field_tags['und'], $node->field_media_tags[$node->language]);

    // Harvest node terms
    $file->field_tags['und'] = array_merge($file->field_tags['und'],
      bg_feeds_harvest_terms($node->field_media_people[$node->language]),
      bg_feeds_harvest_terms($node->field_media_creators[$node->language]),
      bg_feeds_harvest_terms($node->field_media_source[$node->language]));

    file_save($file);
  }
}

function bg_feeds_update_media_item_tags(&$media_item_field, $media_node_field) {
  foreach($media_node_field as $value) {
    $media_item_field[] = $value;
  }
}

function bg_feeds_harvest_terms($media_node_terms) {
  $include = drupal_get_path('module', 'feeds') . '/mappers/taxonomy.inc';
  include_once $include;

  $terms = array();

  if(is_array($media_node_terms)) {
    foreach($media_node_terms as $term) {
      $term = taxonomy_term_load($term['tid']);

      // Does the same term exist in the tags vocabulary?
      if(($tag = taxonomy_term_lookup_term($term->name, 1))) {
        $terms[] = array('tid' => $tag->tid);
      }
      // Create term in tags vocabulary
      else {
        unset($term->tid);
        $term->vid = 1;

        if(taxonomy_term_save($term)) {
          $terms[] = array('tid' => $term->tid);
        }
      }
    }
  }

  return $terms;
}

/**
 * Implementation of hook_feed_plugins().
 */
function bg_feeds_feeds_plugins() {
  $plugin_path = drupal_get_path('module', 'bg_feeds') . '/plugins';
  $info = array();

  // Define OAI Open Images HTTP fetcher plugin for Feeds
  $info['FeedsOAIOIHTTPParser'] = array(
    'name' => 'HTTP OAI-PMH Open Images Fetcher',
    'description' => 'Download content from Open Images OAI-PMH repository.',
    'handler' => array(
      'parent' => 'FeedsOAIHTTPFetcher',
      'class' => 'FeedsOAIOIHTTPFetcher',
      'file' => 'FeedsOAIOIHTTPFetcher.inc',
      'path' => $plugin_path,
    ),
  );
  // Define OAI Open Images parser plugin for Feeds
  $info['FeedsOAIOIParser'] = array(
    'name' => 'OAI Open Images parser',
    'description' => 'Parse Open Images (oai_oi) metadata from Open Images OAI-PMH repository.',
    'handler' => array(
      'parent' => 'FeedsOAIParser',
      'class' => 'FeedsOAIOIParser',
      'file' => 'FeedsOAIOIParser.inc',
      'path' => $plugin_path,
    ),
  );

  // Define Prolocation CSV parser plugin for Feeds
  $info['FeedsProlocationCSVParser'] = array(
    'name' => 'Prolocation CSV parser',
    'description' => 'Parse CSV files from Prolocation.',
    'handler' => array(
      'parent' => 'FeedsCSVParser',
      'class' => 'FeedsProlocationCSVParser',
      'file' => 'FeedsProlocationCSVParser.inc',
      'path' => $plugin_path,
    ),
  );

  // Define file processor plugin for Feeds
  $info['FeedsFileProcessor'] = array(
    'name' => 'File processor',
    'description' => 'Create and update files.',
    'help' => 'Create and update files from parsed content.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'FeedsFileProcessor',
      'file' => 'FeedsFileProcessor.inc',
      'path' => $plugin_path,
    ),
  );

  return $info;
}

function feeds_oai_oi_ajax_callback($form, $form_state) {
  require_once(drupal_get_path('module', 'feeds_oai_pmh') . '/feeds_oai_pmh.inc');

  // Validate the repository.
  $oai_source_url = $form_state['values']['feeds']['FeedsOAIOIHTTPFetcher']['source'];

  $result = feeds_oai_pmh_identify($oai_source_url);

  if ($result['status'] == 0) {
    // OAI-PMH Identify verb returned OK.
    // Change the form's set element.
    $form['feeds']['FeedsOAIOIHTTPFetcher']['set']['#options'] = feeds_oai_pmh_sets_options($result['repository']['sets']);
  }
  else {
    // Empty sets.
    $form['feeds']['FeedsOAIOIHTTPFetcher']['set']['#options'] = feeds_oai_pmh_sets_options(array());
    drupal_set_message($result['output'], 'error');
  }

  return $form['feeds']['FeedsOAIOIHTTPFetcher']['set'];
}

function bg_feeds_hms_to_seconds($time) {
  list($hours, $minutes, $seconds) = explode(':', $time);
  return $hours * 3600 + $minutes * 60 + $seconds;
}
