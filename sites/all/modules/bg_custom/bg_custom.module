<?php

/**
 * Implements hook_form_alter(&$form, &$form_state, $form_id).
 */
function bg_custom_form_alter(&$form, &$form_state, $form_id) {
  global $language;

  // Remove name from comment form
  if ($form_id == 'comment_node_blog_form') {
    unset($form['author']);
    unset($form['comment_body'][$form['language']['#value']][0]['value']['#title']);
  }
  else if($form_id == 'search_block_form') {
    $adapter = facetapi_adapter_load('apachesolr@solr');
    $form['search_block_form']['#default_value'] = $adapter->getSearchKeys();
  }
  elseif ($form_id == 'article_node_form') {
    $result = db_query("SELECT delta FROM {block} WHERE module = 'views' AND theme = 'beeldgeluid'");
    foreach ($result as $block ){
      $options[$block->delta] = $block->delta;
    }
    $form['field_article_view'] = array(
      '#title' => t('View under content'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => $form['field_artikel_view']['und'][0]['value']['#default_value'],
      '#weight' => 5
    );
    $form['#submit'][] = 'bg_custom_article_form_submit';
    drupal_add_css('#edit-field-artikel-view { display:none; }', array('type' => 'inline'));
  }
}

function bg_custom_article_form_submit($form, &$form_state) {
  $form_state['values']['field_artikel_view']['und'][0]['value'] = $form_state['values']['field_article_view'];
}

function bg_custom_form_comment_form_alter(&$form, &$form_state, &$form_id) {
  $form['comment_body']['#after_build'][] = 'bg_custom_customize_comment_form';
}

function bg_custom_customize_comment_form(&$form) {
  $form[$form['#language']][0]['format']['#access'] = FALSE;
  $form[$form['#language']][0]['#format'] = 'plain_text';
  return $form;
}

function bg_custom_form_menu_edit_item_alter(&$form, &$form_state, &$form_id) {
  // Define checkbox.
  $default_value = isset($form_state['build_info']['args'][1]['options']['main_menu_hide']) ? $form_state['build_info']['args'][1]['options']['main_menu_hide'] : 0;
  $main_menu_hide = array(
      '#type' => 'checkbox',
      '#title' => t('Hide in Main Menu'),
      '#default_value' => $default_value,
      '#description' => t('Hide this menu item in the main drop-down navigation.'),
  );
  // Insert checkbox in array after the 'expanded' element.
  $offset = array_search('expanded', array_keys($form)) +1;
  $form = array_slice($form, 0, $offset, true) +
          array('main_menu_hide' => $main_menu_hide) +
          array_slice($form, $offset, NULL, true);
}

function bg_custom_menu_link_alter(&$item) {
  // Save main_menu_hide value in the $options array.
  if (isset($item['main_menu_hide'])) {
    $item['options']['main_menu_hide'] = $item['main_menu_hide'];
    if ($item['main_menu_hide']) {
      $item['options']['attributes']['class']['main_menu_hide'] = 'main-menu-hide';
    }
    else if (isset($item['options']['attributes']['class']['main_menu_hide'])) {
      unset($item['options']['attributes']['class']['main_menu_hide']);
    }
  }
}

/**
 * Implements hook_node_load().
 */
function bg_custom_node_load($nodes, $types) {
  if(arg(0) == 'node') {
    foreach($nodes as &$node){
      switch($node->type) {
        // Entity types which have no image data attached
        case 'agenda':
        case 'article':
        case 'flash':
        case 'iframe':
        case 'news':
        case 'webform':
        case 'blog':
        case 'dossier':
          /*
           * Set Open Graph default image. Open Graph Meta module handles everything else.
           */
          $image = field_get_items('node', $node, 'field_image');
          if(isset($image[0]['fid'])) {
            $node->dummy_field_og_image = array(
              'uri'       => $image[0]['uri'],
              'filemime'  => 'image',
            );
          }
          break;

        case 'media':
          /*
           * Set Open Graph default image. Open Graph Meta module handles everything else.
           */
          $media_file = field_get_items('node', $node, 'field_media_file');
          if (isset($media_file[0]['fid'])) {
            $file     = file_load($media_file[0]['fid']);
            $wrapper  = file_stream_wrapper_get_instance_by_uri($file->uri);

            if($wrapper instanceof BGMediaStreamWrapper || $wrapper instanceof MediaYouTubeStreamWrapper) {
              $uri = $wrapper->getLocalThumbnailPath();
            }
            else if($wrapper instanceof DrupalPublicStreamWrapper) {
              if ($file->type == 'audio') {
                $uri = 'public://audio-mpeg.png';
              }
              else {
                $uri = $file->uri;
              }
            }

            if(isset($uri)) {
              $node->dummy_field_og_image = array(
                  'uri'       => $uri,
                  'filemime'  => 'image',
              );
            }
          }
          break;

      }
    }
  }
}

function bg_custom_block_list_alter(&$blocks) {
  if(arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));

    if($node && in_array($node->type, array('flash', 'iframe', 'dossier'))) {
      foreach($blocks as $key => $block) {
        if(in_array($block->region, array('sidebar_first', 'sidebar_second'))) {
          unset($blocks[$key]);
        }
      }
    }
  }
}

/*
 * Implements hook_menu_alter().
 */
function bg_custom_menu_alter(&$items) {
  // Disable the default front page.
  unset($items['node']);
}

/**
 * Implements hook_service_links().
 */
function bg_custom_service_links() {
  $links = array();

  $links['google_plus_share'] = array(
    'name' => 'Google Plus Share',
    'description' => t('Share on Google+'),
    'link' => 'https://plus.google.com/share?url=<raw-encoded-url>',
    'icon' => drupal_get_path('module', 'bg_custom') .'/img/google_plus_share.png',
  );

  return $links;
}