<?php

/**
 * Implements hook_form_alter(&$form, &$form_state, $form_id).
 */
function bg_custom_form_alter(&$form, &$form_state, $form_id) {
  global $language;

  // Remove name from comment form
  if ($form_id == 'comment_node_blog_form') {
    unset($form['author']);
    unset($form['comment_body'][$form['language']['#value']][0]['value']['#title']);
  }
  else if($form_id == 'search_block_form') {
    $adapter = facetapi_adapter_load('apachesolr@solr');
    $form['search_block_form']['#default_value'] = $adapter->getSearchKeys();
  }
}

function bg_custom_form_comment_form_alter(&$form, &$form_state, &$form_id) {
  $form['comment_body']['#after_build'][] = 'bg_custom_customize_comment_form';
}

function bg_custom_customize_comment_form(&$form) {
  $form[$form['#language']][0]['format']['#access'] = FALSE;
  $form[$form['#language']][0]['#format'] = 'plain_text';
  return $form;
}

/**
 * Implements hook_node_load().
 */
function bg_custom_node_load($nodes, $types) {
  if(arg(0) == 'node') {
    foreach($nodes as &$node){
      switch($node->type) {
        // Entity types which have no image data attached
        case 'agenda':
        case 'article':
        case 'flash':
        case 'iframe':
        case 'news':
        case 'webform':
        case 'blog':
        case 'dossier':
          /*
           * Set Open Graph default image. Open Graph Meta module handles everything else.
           */
          if(isset($node->field_image[$node->language][0]['uri'])) {
            $node->dummy_field_og_image = array(
              'uri'       => $node->field_image[$node->language][0]['uri'],
              'filemime'  => 'image',
            );
          }
          break;

        case 'media':
          /*
           * Set Open Graph default image. Open Graph Meta module handles everything else.
           */
          if (isset($node->field_media_file[$node->language][0]['fid'])) {
            $file     = file_load($node->field_media_file[$node->language][0]['fid']);
            $wrapper  = file_stream_wrapper_get_instance_by_uri($file->uri);
            
            if($wrapper instanceof BGMediaStreamWrapper || $wrapper instanceof MediaYouTubeStreamWrapper) {
              $uri = $wrapper->getLocalThumbnailPath();
            }
            else if($wrapper instanceof DrupalPublicStreamWrapper) {
              $uri = $file->uri;
            }
            
            if(isset($uri)) {
              $node->dummy_field_og_image = array(
                  'uri'       => $uri,
                  'filemime'  => 'image',
              );
            }
          }
          break;

      }
    }
  }
}

function bg_custom_block_list_alter(&$blocks) {
  if(arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));

    if($node && in_array($node->type, array('flash', 'iframe', 'dossier'))) {
      foreach($blocks as $key => $block) {
        if(in_array($block->region, array('sidebar_first', 'sidebar_second'))) {
          unset($blocks[$key]);
        }
      }
    }
  }
}

/*
 * Implements hook_menu_alter().
 */
function bg_custom_menu_alter(&$items) {
  // Disable the default front page.
  unset($items['node']);
}
