<?php

/**
 * @file
 * Internationalization (i18n) submodule: Multilingual contact forms
 *
 * @author Jose A. Reyero, 2005
 */

/**
 * Implements hook_menu().
 *
 * Add translate tab to contact config.
 */
function i18n_contact_menu() {
  $items['admin/structure/contact/edit/%contact/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -100,
  );
  $items['admin/structure/contact/edit/%contact/translate'] = array(
    'title' => 'Translate',
    'access callback' => 'i18n_contact_translate_tab_access',
    'page callback' => 'i18n_contact_translate_tab_page',
    'page arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['admin/structure/contact/edit/%contact/translate/%language'] = array(
    'title' => 'Translate',
    'access callback' => 'i18n_contact_translate_tab_access',
    'page callback' => 'i18n_contact_translate_tab_page',
    'page arguments' => array(4, 6),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu access callback function.
 *
 * Contact translators required to have both contact and locale admin.
 */
function i18n_contact_translate_tab_access() {
  return user_access('translate interface') && user_access('administer contact forms');
}

/**
 * Build a translation page for the given category.
 */
function i18n_contact_translate_tab_page($contact, $language = NULL) {
  module_load_include('inc', 'i18n_string', 'i18n_string.pages');
  $form_meta = array(
    '#page_title' => t('Translate contact category'),
    '#item_title_header' => t('Category'),
    '#item_title_key' => array('contact', 'category', $contact['cid'], 'category'),
    '#item_title_default' => $contact['category'],
    '#edit' => 'admin/structure/contact/edit/' . $contact['cid'],
    '#translate' => 'admin/structure/contact/edit/' . $contact['cid'] . '/translate',
    '#items' => array(),
  );
  $form_meta['#items'][] = array(
    '#title' => t('Category'),
    '#string_key' => array('contact', 'category', $contact['cid'], 'category'),
    '#default_value' => $contact['category'],
  );
  if (!empty($contact['reply'])) {
    $form_meta['#items'][] = array(
      '#title' => t('Auto-reply'),
      '#string_key' => array('contact', 'category', $contact['cid'], 'reply'),
      '#default_value' => $contact['reply']
    );
  }
  return i18n_string_translate_page($form_meta, $language);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function i18n_contact_form_contact_category_delete_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'i18n_contact_form_contact_category_delete_form_submit';
}

/**
 * Remove strings for deleted categories.
 */
function i18n_contact_form_contact_category_delete_form_submit(&$form, $form_state) {
  $contact = $form['contact']['#value']['cid'];
  i18n_string_remove("contact:category:$contact:category");
  i18n_string_remove("contact:category:$contact:reply");
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function i18n_contact_form_contact_category_edit_form_alter(&$form, &$form_state) {
    $form['actions']['translate'] = array(
    '#type' => 'submit',
    '#name'   => 'save_translate',
    '#value' => t('Save and translate'),
  );
  $form['#submit'][] = 'i18n_contact_form_contact_category_edit_form_submit';
}

/**
 * Remove strings for edited/added categories.
 */
function i18n_contact_form_contact_category_edit_form_submit($form, &$form_state) {
  $contact = $form_state['values'];
  i18n_string_update(array('contact', 'category', $contact['cid'], 'category'), $contact['category']);
  if (!empty($contact['reply'])) {
    i18n_string_update(array('contact', 'category', $contact['cid'], 'reply'), $contact['reply']);
  }
  else {
    i18n_string_remove(array('contact', 'category', $contact['cid'], 'reply'));
  }

  // If the save and translate button was clicked, redirect to the translate
  // tab instead of the block overview.
  if ($form_state['triggering_element']['#name'] == 'save_translate') {
    $form_state['redirect'] = 'admin/structure/contact/edit/' . $contact['cid'] . '/translate';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function i18n_contact_form_contact_site_form_alter(&$form, &$form_state) {
  foreach ($form['cid']['#options'] as $key => $label) {
    $form['cid']['#options'][$key] = i18n_string("contact:category:$key:category", $label);
  }
}

/**
 * Implements hook_mail_alter().
 */
function i18n_contact_mail_alter(&$message) {
  if (in_array($message['id'], array('contact_page_mail', 'contact_page_copy', 'contact_page_autoreply'))) {
    // Alter the first part of the subject of emails going out if they need
    // translation.
    $contact = $message['params']['category'];
    $category = i18n_string('contact:category:' . $contact['cid'] . ':category', $contact['category'], array('langcode' => $message['language']->language));
    $message['subject'] = t(
      '[!category] !subject',
      array('!category' => $category, '!subject' => $message['params']['subject']),
      array('langcode' => $message['language']->language)
    );
  }

  if ($message['id'] == 'contact_page_autoreply') {
    $contact = $message['params']['category'];
    // Overwrite the whole message body. Maybe this is not entirely responsible
    // (it might overwrite other existing items altered in by others),
    // but unfortunately Drupal core cotact module does not make its item
    // identifiable easily.
    $message['body'] = array(i18n_string('contact:category:' . $contact['cid'] . ':reply', $contact['reply'], array('langcode' => $message['language']->language)));
  }
}
