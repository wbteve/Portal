<?php
/**
 * @file
 * Provides an HTML5-compatible with Flash-fallback video player.
 *
 * This module provides functionality for loading the Video.js library and
 * formatters for CCK FileFields.
 */

/**
 * Implements hook_menu().
 */
function videojs_menu() {
  $items = array();

  $items['admin/config/media/videojs'] = array(
    'title' => 'Video.js',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('videojs_settings_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure the settings for the Video.js module.',
    'file' => 'includes/videojs.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function videojs_theme() {
  return array(
    'videojs' => array(
      'variables' => array('items' => NULL, 'player_id' => NULL, 'attributes' => NULL),
      'template' => 'theme/videojs',
      'file' => 'includes/videojs.theme.inc',
    ),
    'videojs_view' => array(
      'variables' => array('items' => NULL, 'player_id' => NULL, 'attributes' => NULL),
      'template' => 'theme/videojs',
      'file' => 'includes/videojs.theme.inc',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function videojs_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'videojs') . '/includes',
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function videojs_field_formatter_info() {
  return array(
    'videojs' => array(
      'label' => t('Video.js : HTML5 Video Player'),
      'field types' => array('file', 'media', 'link_field'),
      'description' => t('Display a video file as an HTML5-compatible with Flash-fallback video player.'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function videojs_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($display['type'] !== 'videojs') {
    return array();
  }
  if (empty($items)) {
    return array();
  }

  if ($field['type'] == 'link_field') {
    $links = $items;
    $items = array();
    foreach ($links as $link) {
      // Allow the user to override the mime type using the title field
      if (!empty($link['title']) && strncmp('video/', $link['title'], 6) === 0) {
        $mime = $link['title'];
      }
      // Manual override for WebM, because Drupal doesn't detect it.
      elseif (substr($link['url'], -5) == '.webm') {
        $mime = 'video/webm';
      }
      else {
        $mime = DrupalLocalStreamWrapper::getMimeType($link['url']);

        // If the mime type is application/octet-stream, default to MP4.
        // This happens for instance for links without extensions.
        if ($mime == 'application/octet-stream') {
          $mime = 'video/mp4';
        }
      }

      $items[] = array(
        'uri' => url($link['url'], $link),
        'filemime' => $mime,
      );
    }
  }

  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  return array(
    array(
      '#theme' => 'videojs',
      '#items' => $items,
      '#player_id' => 'videojs-' . $id . '-' . str_replace('_', '-', $instance['field_name']),
      '#attached' => videojs_add(FALSE),
    ),
  );
}

/**
 * Add the Video.js library to the page.
 *
 * @param $add
 *   By default this function will add videojs to the page JavaScript array
 *   directly. If wanting to store the Video.js file as an #attached property,
 *   set this to FALSE and videojs_add() will only return the needed array
 *   suitable for use as an #attached property.
 */
function videojs_add($add = TRUE) {
  static $added = FALSE;
  if (!isset($added)) {
    $added = &drupal_static(__FUNCTION__);
  }

  $directory = variable_get('videojs_directory', 'sites/all/libraries/video-js');

  if (!file_exists($directory . '/video.min.js')) {
    return FALSE;
  }

  $libjs = $directory . '/video.min.js';
  $libcss = $directory . '/video-js.min.css';

  if ($add && !$added) {
    drupal_add_js($libjs, array('group' => JS_LIBRARY));
    drupal_add_css($libcss);
    $added = TRUE;
  }

  return array(
    'js' => array(
      $libjs => array('group' => JS_LIBRARY),
    ),
    'css' => array($libcss),
  );
}

/**
 * Return the version of Video.js installed.
 *
 * @param $directory
 *   The directory to check for a Video.js installation.
 */
function videojs_get_version($directory = NULL) {
  $version = NULL;

  if (!isset($directory)) {
    $directory = variable_get('videojs_directory', 'sites/all/libraries/video-js');
  }

  if (!file_exists($directory . '/video.js')) {
    return NULL;
  }

  $contents = file_get_contents($directory . '/video.js');

  $matches = array();
  if (preg_match('/(?:v[ ]*|Version )([\d.]+)/i', $contents, $matches)) {
    $version = $matches[1];
  }

  return $version;
}

/**
 * Implements hook_libraries_info().
 */
function videojs_libraries_info() {
  $libraries = array();

  $libraries['video-js'] = array(
    'name' => 'Video.js',
    'vendor url' => 'http://videojs.com',
    'download url' => 'https://github.com/zencoder/video-js/downloads',
    'version arguments' => array(
      'file' => 'video.js',
      'pattern' => '/(?:v[ ]*|Version )([\d.]+)/i',
      'lines' => 10,
      'cols' => 50,
    ),
    'versions' => array(
      '2' => array(
        'files' => array(
          'js' => array('video.js' => array('group' => JS_LIBRARY)),
          'css' => array('video-js.css'),
        ),
      ),
      '3' => array(
        'files' => array(
          'js' => array('video.min.js' => array('group' => JS_LIBRARY)),
          'css' => array('video-js.min.css'),
        ),
        'variants' => array(
          'source' => array(
            'files' => array(
              'js' => array('video.js' => array('group' => JS_LIBRARY)),
              'css' => array('video-js.css'),
            ),
            'minified' => array(
              'files' => array(
                'js' => array('video.min.js' => array('group' => JS_LIBRARY)),
                'css' => array('video-js.min.css'),
              ),
            ),
          ),
        ),
      ),
    ),
  );

  return $libraries;
}
