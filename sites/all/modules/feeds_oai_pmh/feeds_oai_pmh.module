<?php

/**
 * Implementation of hook_feed_plugins().
 */
function feeds_oai_pmh_feeds_plugins() {
  $info = array();
  $info['FeedsOAIHTTPFetcher'] = array(
    'name' => 'HTTP OAI-PMH Fetcher',
    'description' => 'Download content from an OAI-PMH repository.',
    'help' => 'Queries an OAI-PMH endpoint of an online repository for data, starting after the last-imported record.',
    'handler' => array(
      'parent' => 'FeedsHTTPFetcher', // This is the key name, not the class name.
      'class' => 'FeedsOAIHTTPFetcher',
      'file' => 'FeedsOAIHTTPFetcher.inc',
      'path' => drupal_get_path('module', 'feeds_oai_pmh'),
    ),
  );
  $info['FeedsOAIParser'] = array(
    'name' => 'OAI parser',
    'description' => 'Parse Dublin Core (oai_dc) metadata from OAI-PMH repositories.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'FeedsOAIParser',
      'file' => 'FeedsOAIParser.inc',
      'path' => drupal_get_path('module', 'feeds_oai_pmh'),
    ),
  );
  return $info;
}

/**
 * Return a "drupalized" hierarchic options form element for the sets in a repository.
 */
function feeds_oai_pmh_sets_options($sets) {
  $options = array('' => t('[all sets]'));
  if (is_array($sets)) {
    ksort($sets);
    $last_depth = 0;
    foreach ($sets as $set_spec => $set_data) {
      $levels = explode(':', $set_spec);
      $label = str_repeat('--', sizeof($levels)-1) . $set_data['name'];
      $options[$set_spec] = "[$set_spec] $label";
    }
  }
  return $options;
}

/**
 * Implementation of hook_menu()
 */
function feeds_oai_pmh_menu() {
  $items = array();
  $items['feeds_oai_pmh/set_ahah'] = array(
    'title' => 'Javascript Choice Form',
    'page callback' => 'feeds_oai_pmh_set_ahah',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function feeds_oai_pmh_set_ahah() {
  if ($form = form_get_cache($_POST['form_build_id'], $form_state)) {

    # TODO: Remove this debug code.
    #$output = "<pre>" . var_export($form, TRUE) . "</pre>";
    #drupal_json(array('status' => TRUE, 'data' => $output));
    #exit;

    // Validate the repository.
    $oai_source_url = $_POST['feeds']['FeedsOAIHTTPFetcher']['source'];
    require_once(drupal_get_path('module', 'feeds_oai_pmh') . '/feeds_oai_pmh.inc');
    $result = feeds_oai_pmh_identify($oai_source_url);
    if ($result['status'] == 0) {
      // OAI-PMH Identify verb returned OK.
      // Change the form's set element.
      $form['feeds']['FeedsOAIHTTPFetcher']['set']['#options'] = feeds_oai_pmh_sets_options($result['repository']['sets']);      }
    else {
      // Empty sets.
      $form['feeds']['FeedsOAIHTTPFetcher']['set']['#options'] = feeds_oai_pmh_sets_options(array());
      drupal_set_message($result['output'], 'error');
    }
    
    // Cache the form.
    form_set_cache($_POST['form_build_id'], $form, $form_state);

    // Build and render the new select element, then return it in JSON format.
    $form_state = array();
    $form['#post'] = array();
    $form = form_builder($form['form_id']['#value'] , $form, $form_state);

    $output = theme('status_messages') . drupal_render($form['feeds']['FeedsOAIHTTPFetcher']['set']);
    drupal_json(array('status' => FALSE, 'data' => $output));
  }
  exit();
}

