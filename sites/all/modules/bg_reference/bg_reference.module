<?php
define('CONTENT_TYPE_MEDIA', 'media');
define('CONTENT_TYPE_TEXT', 'text');
define('CONTENT_TYPE_SEARCH_RESULT', 'search_result');
define('CONTENT_TYPE_QUOTE', 'quote');
define('CONTENT_TYPE_BANNER', 'banner');

function bg_reference_menu() {
  $items = array();
  
  $items['bg-reference/autocomplete'] = array(
    'page callback'     => '_bg_reference_autocomplete',
    'page arguments'    => array(2),
    'access callback'   => TRUE,
    'file'              => 'bg_reference_autocomplete.inc.php',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/***************************************************************
 * Field Type API hooks
 ***************************************************************/
 
/**
 * Implement hook_field_info().
 */
function bg_reference_field_info() {
  return array(
    'bg_reference' => array(
      'label'             => t('Referenced content'),
      'description'       => t('Stores a reference to content.'),
      'default_widget'    => 'bg_referencefield',
      'default_formatter' => 'bg_referenceformat',
    ),
  );
}

/**
 * Implement hook_field_schema().
 */
function bg_reference_field_schema($field) {
  $columns = array(
    'type' => array(
      'type'      => 'varchar',
      'length'    => 32,
      'not null'  => TRUE
    ),
    'content' => array(
      'type'      => 'text',
      'not null'  => TRUE
    ),
    'pos_x' => array(
      'type' => 'int', 
      'unsigned' => FALSE, 
      'not null' => TRUE, 
      'default' => 0,
    ),
    'pos_y' => array(
      'type' => 'int', 
      'unsigned' => FALSE, 
      'not null' => TRUE, 
      'default' => 0,
    ),
    'width' => array(
      'type' => 'int', 
      'unsigned' => TRUE, 
      'not null' => TRUE, 
      'default' => 1,
    ),
    'height' => array(
      'type' => 'int', 
      'unsigned' => TRUE, 
      'not null' => TRUE, 
      'default' => 1,
    ),
  );
  
  return array('columns' => $columns);
}

/**
 * Implement hook_field_validate().
 */
function bg_reference_field_validate($obj_type, $object, $field, $instance, $langcode, &$items, &$errors) {
  
}

/**
 * Implement hook_field_validate().
 */

/**
 * Implement hoo_field_is_empty().
 */
function bg_reference_field_is_empty($item, $field) {
  // Field is empty when content is empty
  return empty($item['content']);
}

/***********************************************************************
 *  Field Type API: Formatter
 **********************************************************************/
 
/**
 * Implement hook_field_formatter_info().
 */
function bg_reference_field_formatter_info() {
  /*return array(
    'colorpicker_helloworld' => array(
      'label' => t('"Hello ,World" In color'),
      'field types' => array('colorpicker_rgb'),
    ),
  );*/
}
 
/**
 * Implements hook_field_formatter_view().
 */
function bg_reference_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  /*if($display['type']=='colorpicker_helloworld') {
      foreach ($items as $delta => $item) {
        $element[$delta] = '<p style="color: ' . $items[0]['rgb']. '">Hello, World</p>';
      }
  }*/
  
  return $element;
}
/**************************************************************************
 * Field Type API: Widget
 **************************************************************************/
 
/**
 * Implement hook_field_widget_info().
 */
function bg_reference_field_widget_info() {
  return array(
    'bg_referencefield' => array(
      'label'       => t('Referenced content'),
      'field types' => array('bg_reference'),
    )
  );
}

/**
 * Implement hook_field_widget().
 *
 * This widget displayed three text fields\, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate 
 * handler that converts our r, g, and b fields into a simulaed single
 * 'rgb' form element.
 */
function bg_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta = 0) {
  $element = array(
    '#type' => 'fieldset',
    // Cinvert during validation.
    '#element_validate' => array('_bg_reference_validate'),
    // TODO: This should not be necessary.
    '#langcode' => $langcode,
    '#attached' => array(
      'js'  => array(drupal_get_path('module', 'bg_reference') . '/js/bg_reference.js')
    ),
    'type' => array(
      '#type'       => 'select',
      '#title'      => t('Content type'),
      '#attributes' => array('class' => array('bg_reference_type')),
      '#options'    => array(
        CONTENT_TYPE_MEDIA          => t('Media'),
        CONTENT_TYPE_TEXT           => t('Text'),
        CONTENT_TYPE_SEARCH_RESULT  => t('Search result'),
        CONTENT_TYPE_QUOTE          => t('Quote'),
        CONTENT_TYPE_BANNER         => t('Banner')
      ),
      '#default_value' => isset($items[$delta]['type']) ? $items[$delta]['type'] : CONTENT_TYPE_TEXT,
    ),
    // Define content fields - content is the master content field
    'content' => array(
      '#type'       => 'textarea',
      '#title'      => t('Content'),
      '#attributes' => array('class' => array('bg_reference_content')),
      '#default_value' => isset($items[$delta]['content']) ? $items[$delta]['content'] : '',
    ),
    'ref_banner' => array(
      '#type'               => 'textfield',
      '#title'              => t('Banner'),
      '#autocomplete_path'  => 'bg-reference/autocomplete/' . CONTENT_TYPE_BANNER,
    ),
    'pos_x' => array(
      '#type'       => 'textfield',
      '#title'      => t('X position'),
      '#attributes' => array('class' => array('bg_reference_pos_x')),
      '#default_value' => isset($items[$delta]['pos_x']) ? $items[$delta]['pos_x'] : 0,
    ),
    'pos_y' => array(
      '#type'       => 'textfield',
      '#title'      => t('Y position'),
      '#attributes' => array('class' => array('bg_reference_pos_y')),
      '#default_value' => isset($items[$delta]['pos_y']) ? $items[$delta]['pos_y'] : 0,
    ),
    'width' => array(
      '#type'       => 'textfield',
      '#title'      => t('Width'),
      '#attributes' => array('class' => array('bg_reference_width')),
      '#default_value' => isset($items[$delta]['width']) ? $items[$delta]['width'] : 1,
    ),
    'height' => array(
      '#type'       => 'textfield',
      '#title'      => t('Height'),
      '#attributes' => array('class' => array('bg_reference_height')),
      '#default_value' => isset($items[$delta]['height']) ? $items[$delta]['height'] : 1,
    ),
  );
  
  return $element;
}

/**
 * Do validation and set form values
 */
function _bg_reference_validate($element, &$form_state) {
  if(preg_match('/(?P<name>\w+)\[(?P<langcode>\w+)\]\[(?P<delta>\d+)\]/', $element['type']['#name'], $field)) {
    if (isset($form_state['values'][$field['name']][$field['langcode']][$field['delta']])) {
      $values = $form_state['values'][$field['name']][$field['langcode']][$field['delta']];
      
      if(!empty($values['content'])) {
        // Validate x position
        if(!_bg_reference_is_int($values['pos_x'])) {
          form_set_error("{$field['name']}][{$field['langcode']}][{$field['delta']}][pos_x", t('X position should be an integer value'));
        }
        
        // Validate y position
        if(!_bg_reference_is_int($values['pos_y'])) {
          form_set_error("{$field['name']}][{$field['langcode']}][{$field['delta']}][pos_y", t('Y position should be an integer value'));
        }
        
        // Validate width
        if(!_bg_reference_is_int($values['width']) || (_bg_reference_is_int($values['width']) && $values['width'] <= 0)) {
          form_set_error("{$field['name']}][{$field['langcode']}][{$field['delta']}][width", t('Width should be a positive integer value larger than zero'));
        }
        
        // Validate height
        if(!_bg_reference_is_int($values['height']) || (_bg_reference_is_int($values['height']) && $values['height'] <= 0)) {
          form_set_error("{$field['name']}][{$field['langcode']}][{$field['delta']}][height", t('Height should be a positive integer value larger than zero'));
        }
      }
      
      form_set_value($element, $values, $form_state);
    }
  }
}

function _bg_reference_is_int($value) {
  return ((string) $value) === ((string)(int) $value);
}
